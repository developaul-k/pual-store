<div class="sign-container login">
  <form class="form" method="POST" action="/auth/signin">
    <div class="round-box">
      <div class="h1">로그인</div>
      <div class="column">
        <input type="text" name="email" class="input" placeholder="이메일을 입력해주세요.">
      </div>
      <div class="column">
        <input type="password" name="password" class="input" placeholder="비밀번호를 입력해주세요.">
      </div>
      <div class="column">
        <button type="submit" class="button">로그인</button>
      </div>
      <div class="column">
        계정이 없으신가요?
        <a href="/signup">회원가입</a>
      </div>
      <div class="column">
        <span class="error-message"></span>
      </div>
    </div>
  </form>
</div>

<script>
  const errMsg = msg => go(
    $.qs('.error-message'),
    $.text(msg),
    $.show);
  /*
  go(
    $.qs('.form'),
    $.on('submit', (e) => {
      e.preventDefault();

      const { currentTarget: {
        email: { value: emailValue },
        password: { value: passwordValue }
      } } = e;

      if (emailValue == '' || passwordValue == '') return errMsg('이메일 또는 비밀번호를 입력해주세요!');

      go(
        fetch('/signin', {
          method: 'POST',
          headers: {
            'Content-type': 'application/json'
          },
          body: JSON.stringify({
            email: emailValue,
            password: passwordValue
          }),
        }),
        res => res.json(),
        ({ redirectTo, data: { id }, message }) => {
          if (id) return location.replace(`http://localhost:3000${redirectTo}`);
          errMsg(message);
        });
    })
  );
    */

  go(
    $.qsa('.input'),
    $.on('focus', () => go(
      $.qsa('.error-message'),
      each(el => el.style.display == 'block' && $.hide(el))
    ))
  );


  /*
    *
    **
    ***
    ****
    *****
  */

  const prange = (l, start = 0) => {
    let res = [];
    let i = start;
    while (i < (l + start)) {
      res.push(i);
      ++i;
    };
    return res;
  };

  go(
    prange(5, 1),
    map(a => go(
      prange(a),
      map(b => '*'),
      reduce((a, b) => a + b)
    )),
    reduce((a, b) => a + '\n' + b),
    console.log
  )
  /*const arr1 = [
    [1],
    [1, 2],
    [1, 2, 3],
    [1, 2, 3, 4],
    [1, 2, 3, 4, 5]
  ];

  const arr2 = arr1.map(a => a.map(b => '*'));
  const arr3 = arr2.map(a => a.reduce((a, b) => a + b));
  const arr4 = arr3.reduce((a, b) => `${a}\n${b}`)

  console.log(arr4);*/
</script>